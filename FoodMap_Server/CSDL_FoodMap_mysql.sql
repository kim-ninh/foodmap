
CREATE TABLE ACCOUNT
(
	USERNAME VARCHAR(20) PRIMARY KEY,
	PASSWORD VARCHAR(20),
	NAME VARCHAR(40) CHARSET utf8,
	PHONE_NUMBER VARCHAR(11),
	EMAIL VARCHAR(20) UNIQUE
);

CREATE TABLE AUTHENTICATED
(
	USERNAME VARCHAR(20) NOT NULL,
	TOKEN VARCHAR(200),
	PRIMARY KEY (USERNAME, TOKEN)
);

CREATE TABLE GUESTACCOUNT
(
	EMAIL VARCHAR(30) PRIMARY KEY,
	NAME VARCHAR(40) CHARSET utf8
);

CREATE TABLE RESTAURANT
(
	ID INT PRIMARY KEY,
	ID_USER VARCHAR(20),
	NAME VARCHAR(100) CHARSET utf8 NOT NULL,
	ADDRESS VARCHAR(50) CHARSET utf8 NOT NULL,
	PHONE_NUMBER VARCHAR(11),
	DESCRIBE_TEXT TEXT,
	URL_IMAGE VARCHAR(200) CHARSET utf8, -- LINK IMAGE
	TIMEOPEN TIME NOT NULL,
	TIMECLOSE TIME NOT NULL
);

CREATE TABLE LOCATION
(
	ID_REST INT NOT NULL,
	LAT FLOAT NOT NULL, -- latitude
	LON FLOAT NOT NULL,	-- longitude
	PRIMARY KEY(LAT, LON)
);

CREATE TABLE DISH
(
	NAME VARCHAR(50) CHARSET utf8 NOT NULL,
	ID_REST INT,
	PRICE INT,
	URL_IMAGE VARCHAR(200) CHARSET utf8, -- LINK IMAGE
	ID_CATALOG INT,
	PRIMARY KEY(NAME, ID_REST)
);

CREATE TABLE CATALOGS
(
	ID INT AUTO_INCREMENT PRIMARY KEY,
	NAME VARCHAR(30) CHARSET utf8 UNIQUE NOT NULL
);

CREATE TABLE TAGS
(
	ID_REST INT,
	ID_CATALOG INT,
	PRIMARY KEY(ID_REST, ID_CATALOG)
);

CREATE TABLE COMMENTS
(
	DATE_TIME DATE NOT NULL, -- ngày comment
	ID_REST INT NOT NULL,
	GUEST_EMAIL VARCHAR(30) NULL, -- người dùng bình thường
	OWNER_EMAIL VARCHAR(20) NULL, -- là chủ quán ăn comment
	COMMENT NVARCHAR(200) NOT NULL,
	PRIMARY KEY (DATE_TIME, ID_REST)
);

CREATE TABLE RANK
(
	ID_REST INT NOT NULL,
	EMAIL_USER VARCHAR(30),
	STAR INT NOT NULL, -- 1 tới 5
	PRIMARY KEY(ID_REST, EMAIL_USER)
);

-- SET FOREIGN KEY
ALTER TABLE AUTHENTICATED ADD CONSTRAINT FK_AUTHENTICATED_ACCOUNT FOREIGN KEY(USERNAME) REFERENCES ACCOUNT(USERNAME);

ALTER TABLE RESTAURANT ADD CONSTRAINT FK_RESTAURANT_ACCOUNT FOREIGN KEY(ID_USER) REFERENCES ACCOUNT(USERNAME);

ALTER TABLE DISH ADD CONSTRAINT FK_DISH_RESTAURANT FOREIGN KEY(ID_REST) REFERENCES RESTAURANT(ID);

ALTER TABLE DISH ADD CONSTRAINT FK_DISH_CATALOGS FOREIGN KEY(ID_CATALOG) REFERENCES CATALOGS(ID);


ALTER TABLE TAGS ADD CONSTRAINT FK_TAGS_RESTAURANT FOREIGN KEY(ID_REST) REFERENCES RESTAURANT(ID);


ALTER TABLE TAGS ADD CONSTRAINT FK_TAGS_CATALOGS FOREIGN KEY(ID_CATALOG) REFERENCES CATALOGS(ID);


ALTER TABLE COMMENTS ADD CONSTRAINT FK_COMMENTS_RESTAURANT FOREIGN KEY(ID_REST) REFERENCES RESTAURANT(ID);


ALTER TABLE COMMENTS ADD CONSTRAINT FK_COMMENTS_GUESTACCOUNT FOREIGN KEY(GUEST_EMAIL) REFERENCES GUESTACCOUNT(EMAIL);


ALTER TABLE COMMENTS ADD CONSTRAINT FK_COMMENTS_ACCOUNT FOREIGN KEY(OWNER_EMAIL) REFERENCES ACCOUNT(EMAIL);


ALTER TABLE RANK ADD CONSTRAINT FK_RANK_RESTAURANT FOREIGN KEY(ID_REST) REFERENCES RESTAURANT(ID);


ALTER TABLE RANK ADD CONSTRAINT FK_RANK_GUESTACCOUNT FOREIGN KEY(EMAIL_USER) REFERENCES GUESTACCOUNT(EMAIL);


ALTER TABLE LOCATION ADD CONSTRAINT FK_LOCATION_RESTAURANT FOREIGN KEY(ID_REST) REFERENCES RESTAURANT(ID);


-- SET RULES
ALTER TABLE ACCOUNT ADD CONSTRAINT C_ACCOUNT_PHONENUMBER CHECK(LEN(PHONE_NUMBER) IN (10,11));


ALTER TABLE RESTAURANT ADD CONSTRAINT C_RESTAURANT_PHONENUMBER CHECK(LEN(PHONE_NUMBER) IN (10,11));


ALTER TABLE RANK ADD CONSTRAINT C_RANK_STAR CHECK(STAR >= 1 AND STAR <= 5);

-- check login
DELIMITER //
CREATE PROCEDURE SP_LOGIN(IN USERNAME VARCHAR(20) , IN PASS VARCHAR(20))
BEGIN
	SELECT * FROM ACCOUNT AC WHERE AC.USERNAME = USERNAME AND AC.PASSWORD = PASS;
END //
DELIMITER ;

-- xóa restaurant
DELIMITER //
CREATE PROCEDURE SP_DELETE_REST(IN ID_REST INT)
BEGIN
	DELETE FROM TAGS  WHERE TAGS.ID_REST = ID_REST;
	DELETE FROM COMMENTS  WHERE COMMENTS.ID_REST = ID_REST;
	DELETE FROM LOCATION WHERE LOCATION.ID_REST = ID_REST;
	DELETE FROM DISH WHERE DISH.ID_REST = ID_REST;
	DELETE FROM RESTAURANT WHERE RESTAURANT.ID = ID_REST;
END //
DELIMITER ;

-- lấy id rest tự động
DELIMITER //
CREATE FUNCTION FC_GETID_REST() RETURNS INT 
BEGIN

	DECLARE ID INT DEFAULT 0;
	
	SELECT RES.ID INTO ID FROM RESTAURANT RES WHERE NOT EXISTS 
							(
								SELECT * FROM RESTAURANT RES2 WHERE RES2.ID = RES.ID + 1
							)
							LIMIT 1;
	RETURN ID + 1;
END //
DELIMITER ;


-- lấy token sau khi đăng nhập
DELIMITER //
CREATE FUNCTION FC_GETTOKEN(USERNAME VARCHAR(20)) RETURNS VARCHAR(32) 
BEGIN
	DECLARE TOKEN VARCHAR(32) DEFAULT NULL;
	-- xóa token cũ nếu có
	DELETE FROM AUTHENTICATED WHERE AUTHENTICATED.USERNAME = USERNAME;
	-- thêm token ms vào
	SELECT MD5(NOW()) INTO TOKEN; -- lấy token 
	
	-- thêm token vào bảng AUTHENTICATED
	INSERT INTO AUTHENTICATED VALUES (USERNAME, TOKEN);
	
	RETURN TOKEN;
END //
DELIMITER ;


-- kiểm tra token có tồn tại hay không
DELIMITER //
CREATE FUNCTION FC_CHECKTOKEN(TOKEN VARCHAR(32)) RETURNS INT 
BEGIN
	IF EXISTS (SELECT * FROM AUTHENTICATED WHERE AUTHENTICATED.TOKEN = TOKEN) THEN
		RETURN 1;
	ELSE
		RETURN 0;
	END IF;
END //
DELIMITER ;
























